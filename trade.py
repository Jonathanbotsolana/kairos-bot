import os
import time
import logging
import base58
import json
import requests
import importlib.util
from solders.keypair import Keypair
from solders.hash import Hash
from solana.rpc.api import Client
from base64 import b64decode, b64encode

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("kairos-trade")

# Constantes
USDC_MINT = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"  # USDC token address on Solana
SOL_MINT = "So11111111111111111111111111111111111111112"  # Wrapped SOL address
JUPITER_API_BASE = "https://quote-api.jup.ag/v6"  # Jupiter Aggregator API
RPC_URL = "https://api.mainnet-beta.solana.com"  # Solana RPC URL

def sign_transaction(transaction_data, keypair):
    """
    Signe une transaction encod√©e en base64 avec le keypair fourni
    
    Args:
        transaction_data: Transaction encod√©e en base64
        keypair: Objet Keypair Solana pour signer
        
    Returns:
        str: Transaction sign√©e encod√©e en base64
    """
    try:
        # D√©coder la transaction base64
        transaction_bytes = b64decode(transaction_data)
        
        # Obtenir un blockhash r√©cent via RPC direct
        try:
            rpc_response = requests.post(
                RPC_URL,
                json={
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getLatestBlockhash",
                    "params": [{"commitment": "finalized"}]
                }
            )
            recent_blockhash = rpc_response.json()["result"]["value"]["blockhash"]
            logger.info(f"‚úÖ Blockhash r√©cent obtenu: {recent_blockhash}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'obtention du blockhash: {str(e)}")
            recent_blockhash = None
        
        # Approche simplifi√©e: signer directement le message de transaction
        try:
            # Signer directement les donn√©es de transaction
            signature_obj = keypair.sign_message(transaction_bytes)
            
            # La signature est l'objet lui-m√™me, pas un attribut
            signature_bytes = bytes(signature_obj)
            
            # Cr√©er une structure simplifi√©e pour la transaction sign√©e
            signed_tx_data = {
                "transaction": transaction_data,
                "signature": base58.b58encode(signature_bytes).decode('utf-8'),
                "pubkey": str(keypair.pubkey())
            }
            
            # S√©rialiser en JSON puis encoder en base64
            signed_tx_json = json.dumps(signed_tx_data)
            signed_tx_b64 = b64encode(signed_tx_json.encode()).decode('utf-8')
            
            logger.info("‚úÖ Transaction sign√©e avec succ√®s (m√©thode simplifi√©e)")
            
            # Utiliser la biblioth√®que solana pour cr√©er une transaction correctement sign√©e
            try:
                from solana.transaction import Transaction
                
                # D√©coder la transaction
                tx = Transaction.deserialize(transaction_bytes)
                
                # Signer avec le keypair
                tx.sign([keypair])
                
                # S√©rialiser et encoder en base64
                signed_tx_bytes = tx.serialize()
                signed_tx_b64 = b64encode(signed_tx_bytes).decode('utf-8')
                
                logger.info("‚úÖ Transaction sign√©e avec succ√®s (solana-py)")
                return signed_tx_b64
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la signature avec solana-py: {str(e)}")
                
                # Si la m√©thode solana-py √©choue, essayer avec la m√©thode Jupiter
                try:
                    # Cr√©er une structure pour l'API Jupiter
                    signed_tx_data = {
                        "transaction": transaction_data,
                        "signatures": [{
                            "publicKey": str(keypair.pubkey()),
                            "signature": base58.b58encode(signature_bytes).decode('utf-8')
                        }]
                    }
                    
                    # Encoder en base64
                    signed_tx_json = json.dumps(signed_tx_data)
                    signed_tx_b64 = b64encode(signed_tx_json.encode()).decode('utf-8')
                    
                    logger.info("‚úÖ Transaction sign√©e avec succ√®s (format Jupiter)")
                    return signed_tx_b64
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la signature au format Jupiter: {str(e2)}")
                    logger.warning("‚ö†Ô∏è Utilisation de la transaction non sign√©e (va probablement √©chouer)")
                    return transaction_data
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la signature simplifi√©e: {str(e)}")
            
            # Essayer avec solders en utilisant le blockhash r√©cent
            try:
                from solders.transaction import Transaction as SoldersTransaction
                from solders.message import Message
                from solders.hash import Hash
                
                # D√©s√©rialiser comme un Message
                message = Message.from_bytes(transaction_bytes)
                
                # Cr√©er une transaction avec le blockhash r√©cent
                if recent_blockhash:
                    blockhash = Hash.from_string(recent_blockhash)
                    # Cr√©er une transaction avec le blockhash r√©cent
                    tx = SoldersTransaction(message, [], blockhash)
                else:
                    # Fallback sans blockhash
                    tx = SoldersTransaction(message, [])
                
                # Signer la transaction avec le keypair
                signature_obj = keypair.sign_message(bytes(message))
                
                # La signature est l'objet lui-m√™me
                signatures = [signature_obj]
                
                # Cr√©er une nouvelle transaction avec la signature
                tx_signed = SoldersTransaction(message, signatures)
                
                # S√©rialiser la transaction sign√©e
                signed_tx_bytes = bytes(tx_signed)
                logger.info("‚úÖ Transaction sign√©e avec succ√®s (solders)")
                return b64encode(signed_tx_bytes).decode('utf-8')
                
            except Exception as e2:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la signature avec solders: {str(e2)}")
                
                # Essayer avec une approche alternative de solders
                try:
                    from solders.transaction import VersionedTransaction
                    from solders.message import MessageV0
                    
                    # Essayer de d√©s√©rialiser comme une transaction versionn√©e
                    try:
                        versioned_tx = VersionedTransaction.from_bytes(transaction_bytes)
                        message = versioned_tx.message
                        
                        # Signer le message
                        signature_obj = keypair.sign_message(bytes(message))
                        
                        # La signature est l'objet lui-m√™me
                        signatures = [signature_obj]
                        
                        # Cr√©er une nouvelle transaction avec la signature
                        tx_signed = VersionedTransaction(message, signatures)
                        
                        # S√©rialiser la transaction sign√©e
                        signed_tx_bytes = bytes(tx_signed)
                        logger.info("‚úÖ Transaction sign√©e avec succ√®s (solders versioned)")
                        return b64encode(signed_tx_bytes).decode('utf-8')
                        
                    except Exception as e_versioned:
                        logger.warning(f"‚ö†Ô∏è Erreur avec transaction versionn√©e: {str(e_versioned)}")
                        raise e_versioned
                        
                except Exception as e3:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la signature alternative avec solders: {str(e3)}")
                    
                    # Derni√®re tentative: utiliser directement l'API Jupiter pour signer
                    logger.info("üîÑ Tentative de signature via l'API Jupiter...")
                    
                    # Retourner la transaction non sign√©e pour l'instant
                    logger.warning("‚ö†Ô∏è Utilisation de la transaction non sign√©e (va probablement √©chouer)")
                    return transaction_data
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la signature de la transaction: {str(e)}")
        return transaction_data

def get_jupiter_quote(amount_usdc=1.0):
    """
    Obtient un devis pour √©changer USDC contre SOL via Jupiter
    
    Args:
        amount_usdc: Montant d'USDC √† √©changer
        
    Returns:
        dict: R√©sultat du devis
    """
    try:
        # Convertir le montant USDC en lamports (USDC a 6 d√©cimales)
        amount_in_lamports = int(amount_usdc * 1_000_000)
        
        # Param√®tres pour l'API Jupiter
        quote_params = {
            "inputMint": USDC_MINT,
            "outputMint": SOL_MINT,
            "amount": amount_in_lamports,
            "slippageBps": 50,  # 0.5% de slippage maximum
        }
        
        logger.info(f"üîç Obtention du devis pour {amount_usdc} USDC ‚Üí SOL...")
        response = requests.get(f"{JUPITER_API_BASE}/quote", params=quote_params)
        
        if response.status_code == 200:
            data = response.json()
            
            # Calculer le montant de sortie en SOL (conversion de lamports √† SOL)
            out_amount_sol = float(data["outAmount"]) / 1_000_000_000
            
            # Calculer l'impact sur le prix
            price_impact_percent = float(data.get("priceImpactPct", 0)) * 100
            
            return {
                "status": "success",
                "out_amount": out_amount_sol,
                "price_impact": f"{price_impact_percent:.4f}%",
                "quote_response": data
            }
        else:
            logger.error(f"‚ùå Erreur API Jupiter: {response.status_code} - {response.text}")
            return {
                "status": "error",
                "message": f"Erreur API Jupiter: {response.status_code}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'obtention du devis: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }

def create_jupiter_transaction(wallet_address, quote_data, priority_fee=5000):
    """
    Cr√©e une transaction de swap via l'API Jupiter
    
    Args:
        wallet_address: Adresse du wallet Solana
        quote_data: Donn√©es du devis obtenues via get_jupiter_quote
        priority_fee: Frais de priorit√© en lamports
        
    Returns:
        dict: R√©sultat contenant la transaction ou une erreur
    """
    try:
        # Param√®tres pour l'API Jupiter
        swap_params = {
            "quoteResponse": quote_data,
            "userPublicKey": wallet_address,
            "wrapAndUnwrapSol": True,
            "prioritizationFeeLamports": priority_fee
        }
        
        logger.info(f"üèóÔ∏è Cr√©ation d'une transaction via Jupiter (priorit√©: {priority_fee} lamports)...")
        swap_response = requests.post(f"{JUPITER_API_BASE}/swap", json=swap_params)
        
        if swap_response.status_code != 200:
            return {
                "status": "error",
                "message": f"Erreur lors de la cr√©ation de la transaction: {swap_response.text}"
            }
        
        swap_data = swap_response.json()
        transaction_data = swap_data["swapTransaction"]
        
        return {
            "status": "success",
            "transaction": transaction_data
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de la transaction: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }

def send_transaction(transaction_data, skip_preflight=True):
    """
    Envoie une transaction sign√©e via l'API RPC de Solana
    
    Args:
        transaction_data: Transaction sign√©e encod√©e en base64
        skip_preflight: Ignorer les v√©rifications pr√©liminaires
        
    Returns:
        dict: R√©sultat de l'envoi
    """
    try:
        headers = {"Content-Type": "application/json"}
        
        # V√©rifier si la transaction est au format Jupiter (JSON)
        try:
            # Essayer de d√©coder et parser comme JSON
            decoded_data = b64decode(transaction_data).decode('utf-8')
            json_data = json.loads(decoded_data)
            
            # Si c'est un dict avec 'transaction' et 'signatures', c'est au format Jupiter
            if isinstance(json_data, dict) and 'transaction' in json_data and 'signatures' in json_data:
                logger.info("üìù Transaction au format Jupiter d√©tect√©e, extraction...")
                # Extraire la transaction r√©elle
                transaction_data = json_data['transaction']
        except:
            # Si ce n'est pas du JSON, c'est probablement d√©j√† une transaction encod√©e en base64
            pass
        
        # Cr√©er une requ√™te RPC
        payload = {
            "jsonrpc": "2.0",
            "id": str(int(time.time())),
            "method": "sendTransaction",
            "params": [
                transaction_data,
                {
                    "skipPreflight": skip_preflight,
                    "preflightCommitment": "confirmed",
                    "encoding": "base64",
                    "maxRetries": 5
                }
            ]
        }
        
        logger.info(f"üì§ Envoi de la transaction via RPC...")
        response = requests.post(RPC_URL, headers=headers, json=payload)
        result = response.json()
        
        if "error" in result:
            logger.error(f"‚ùå Erreur RPC: {result['error']}")
            return {
                "status": "error",
                "message": f"Erreur lors de l'envoi: {result['error'].get('message', 'Erreur inconnue')}"
            }
        
        tx_signature = result["result"]
        logger.info(f"üìù Transaction envoy√©e avec signature: {tx_signature}")
        
        # Cr√©er URL Solana Explorer
        explorer_url = f"https://explorer.solana.com/tx/{tx_signature}?cluster=mainnet-beta"
        
        return {
            "status": "success",
            "txid": tx_signature,
            "explorer_url": explorer_url
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'envoi de la transaction: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }

def execute_jupiter_swap_direct(keypair, quote_data):
    """
    Ex√©cute un swap en utilisant directement l'API Jupiter v6
    
    Args:
        keypair: Objet Keypair de Solana pour signer la transaction
        quote_data: Donn√©es du devis obtenues via get_jupiter_quote
        
    Returns:
        dict: R√©sultat du swap
    """
    try:
        wallet_address = str(keypair.pubkey())
        
        # 1. Cr√©er une transaction via Jupiter
        tx_result = create_jupiter_transaction(wallet_address, quote_data)
        
        if tx_result["status"] != "success":
            return {
                "status": "error",
                "message": tx_result["message"]
            }
        
        # 2. Signer la transaction avec notre keypair
        signed_tx = sign_transaction(tx_result["transaction"], keypair)
        
        # 3. Envoyer la transaction sign√©e
        send_result = send_transaction(signed_tx)
        
        if send_result["status"] != "success":
            # Si l'envoi √©choue, essayer avec des frais de priorit√© plus √©lev√©s
            logger.info("üîÑ Nouvelle tentative avec des frais de priorit√© plus √©lev√©s...")
            
            # Cr√©er une nouvelle transaction avec des frais plus √©lev√©s
            retry_tx_result = create_jupiter_transaction(wallet_address, quote_data, priority_fee=10000)
            
            if retry_tx_result["status"] != "success":
                return {
                    "status": "error",
                    "message": retry_tx_result["message"]
                }
            
            # Signer la nouvelle transaction
            signed_retry_tx = sign_transaction(retry_tx_result["transaction"], keypair)
            
            # Envoyer la nouvelle transaction
            retry_send_result = send_transaction(signed_retry_tx)
            
            if retry_send_result["status"] != "success":
                return {
                    "status": "error",
                    "message": retry_send_result["message"]
                }
            
            # Utiliser le r√©sultat de la nouvelle tentative
            send_result = retry_send_result
        
        # 4. Cr√©er le r√©sultat final
        return {
            "status": "pending",
            "message": "Transaction envoy√©e, v√©rifiez l'explorateur Solana pour confirmation",
            "txid": send_result["txid"],
            "explorer_url": send_result["explorer_url"],
            "input_amount": 1.0,
            "estimated_output": float(quote_data["outAmount"]) / 1_000_000_000
        }
            
    except Exception as e:
        error_msg = f"Erreur lors de l'ex√©cution du swap: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {
            "status": "error",
            "message": error_msg
        }

def main(keypair=None):
    """
    Fonction principale de la logique de trading - Effectue un swap r√©el de 1 USDC vers SOL
    
    Args:
        keypair: Objet Keypair de Solana (optionnel, peut √™tre pass√© depuis app.py)
    
    Returns:
        dict: R√©sultat de l'op√©ration de trading
    """
    logger.info("üöÄ D√©marrage du swap r√©el de 1 USDC vers SOL")
    
    try:
        # Si keypair n'est pas fourni, on tente de le r√©cup√©rer depuis l'environnement
        if keypair is None:
            phantom_key = os.environ.get("PHANTOM_KEY_BASE58")
            if not phantom_key:
                logger.error("‚ö†Ô∏è Variable d'environnement PHANTOM_KEY_BASE58 manquante")
                return {"status": "error", "message": "Cl√© manquante"}
            
            decoded = base58.b58decode(phantom_key)
            if len(decoded) == 64:
                keypair = Keypair.from_bytes(decoded)
            elif len(decoded) == 32:
                keypair = Keypair.from_seed(decoded)
            else:
                logger.error("‚ùå Format de cl√© incorrect")
                return {"status": "error", "message": "Format de cl√© incorrect"}
        
        wallet_address = str(keypair.pubkey())
        logger.info(f"‚úÖ Wallet pr√©par√©: {wallet_address}")
        
        # Obtenir un devis de swap de 1 USDC vers SOL
        swap_quote = get_jupiter_quote(amount_usdc=1.0)
        
        if swap_quote["status"] == "success":
            logger.info(f"üìä Devis obtenu: 1 USDC ‚âà {swap_quote['out_amount']} SOL (Impact prix: {swap_quote['price_impact']})")
            
            # Ex√©cuter le swap r√©el
            swap_result = execute_jupiter_swap_direct(keypair, swap_quote["quote_response"])
            
            logger.info(f"üí± R√©sultat du swap: {swap_result}")
            return {
                "status": "success",
                "wallet": wallet_address,
                "swap_result": swap_result,
                "timestamp": time.time()
            }
        else:
            logger.error(f"‚ùå Erreur lors de l'obtention du devis: {swap_quote['message']}")
            return {
                "status": "error", 
                "message": swap_quote["message"]
            }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du swap: {str(e)}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    # Ce code s'ex√©cute uniquement si le fichier est appel√© directement
    result = main()
    logger.info(f"‚èπÔ∏è Script termin√© avec r√©sultat: {result}")