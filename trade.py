import os
import time
import logging
import base58
import json
import requests
from solders.keypair import Keypair
from solana.rpc.api import Client
from base64 import b64decode, b64encode

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("kairos-trade")

# Constantes
USDC_MINT = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"  # USDC token address on Solana
SOL_MINT = "So11111111111111111111111111111111111111112"  # Wrapped SOL address
JUPITER_API_BASE = "https://quote-api.jup.ag/v6"  # Jupiter Aggregator API

def main(keypair=None):
    """
    Fonction principale de la logique de trading - Effectue un swap r√©el de 1 USDC vers SOL
    
    Args:
        keypair: Objet Keypair de Solana (optionnel, peut √™tre pass√© depuis app.py)
    
    Returns:
        dict: R√©sultat de l'op√©ration de trading
    """
    logger.info("üöÄ D√©marrage du swap r√©el de 1 USDC vers SOL")
    
    try:
        # Si keypair n'est pas fourni, on tente de le r√©cup√©rer depuis l'environnement
        if keypair is None:
            phantom_key = os.environ.get("PHANTOM_KEY_BASE58")
            if not phantom_key:
                logger.error("‚ö†Ô∏è Variable d'environnement PHANTOM_KEY_BASE58 manquante")
                return {"status": "error", "message": "Cl√© manquante"}
            
            decoded = base58.b58decode(phantom_key)
            if len(decoded) == 64:
                keypair = Keypair.from_bytes(decoded)
            elif len(decoded) == 32:
                keypair = Keypair.from_seed(decoded)
            else:
                logger.error("‚ùå Format de cl√© incorrect")
                return {"status": "error", "message": "Format de cl√© incorrect"}
        
        wallet_address = str(keypair.pubkey())
        logger.info(f"‚úÖ Wallet pr√©par√©: {wallet_address}")
        
        # Obtenir un devis de swap de 1 USDC vers SOL
        swap_quote = get_jupiter_quote(amount_usdc=1.0)
        
        if swap_quote["status"] == "success":
            logger.info(f"üìä Devis obtenu: 1 USDC ‚âà {swap_quote['out_amount']} SOL (Impact prix: {swap_quote['price_impact']})")
            
            # Ex√©cuter le swap r√©el
            swap_result = execute_jupiter_swap_direct(keypair, swap_quote["quote_response"])
            
            logger.info(f"üí± R√©sultat du swap: {swap_result}")
            return {
                "status": "success",
                "wallet": wallet_address,
                "swap_result": swap_result,
                "timestamp": time.time()
            }
        else:
            logger.error(f"‚ùå Erreur lors de l'obtention du devis: {swap_quote['message']}")
            return {
                "status": "error", 
                "message": swap_quote["message"]
            }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du swap: {str(e)}")
        return {"status": "error", "message": str(e)}

def get_jupiter_quote(amount_usdc=1.0):
    """
    Obtient un devis pour √©changer USDC contre SOL via Jupiter
    
    Args:
        amount_usdc: Montant d'USDC √† √©changer
        
    Returns:
        dict: R√©sultat du devis
    """
    try:
        # Convertir le montant USDC en lamports (USDC a 6 d√©cimales)
        amount_in_lamports = int(amount_usdc * 1_000_000)
        
        # Param√®tres pour l'API Jupiter
        quote_params = {
            "inputMint": USDC_MINT,
            "outputMint": SOL_MINT,
            "amount": amount_in_lamports,
            "slippageBps": 50,  # 0.5% de slippage maximum
        }
        
        logger.info(f"üîç Obtention du devis pour {amount_usdc} USDC ‚Üí SOL...")
        response = requests.get(f"{JUPITER_API_BASE}/quote", params=quote_params)
        
        if response.status_code == 200:
            data = response.json()
            
            # Calculer le montant de sortie en SOL (conversion de lamports √† SOL)
            out_amount_sol = float(data["outAmount"]) / 1_000_000_000
            
            # Calculer l'impact sur le prix
            price_impact_percent = float(data.get("priceImpactPct", 0)) * 100
            
            return {
                "status": "success",
                "out_amount": out_amount_sol,
                "price_impact": f"{price_impact_percent:.4f}%",
                "quote_response": data
            }
        else:
            logger.error(f"‚ùå Erreur API Jupiter: {response.status_code} - {response.text}")
            return {
                "status": "error",
                "message": f"Erreur API Jupiter: {response.status_code}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'obtention du devis: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }

def execute_jupiter_swap_direct(keypair, quote_data):
    """
    Ex√©cute un swap en utilisant directement l'API Jupiter v6
    
    Args:
        keypair: Objet Keypair de Solana pour signer la transaction
        quote_data: Donn√©es du devis obtenues via get_jupiter_quote
        
    Returns:
        dict: R√©sultat du swap
    """
    try:
        wallet_address = str(keypair.pubkey())
        
        # 1. Cr√©er une session d'√©change avec l'API Jupiter
        logger.info("üîê Cr√©ation d'une session d'√©change Jupiter...")
        
        # 2. Construire la transaction de swap via l'API Jupiter
        swap_params = {
            "quoteResponse": quote_data,
            "userPublicKey": wallet_address,
            "wrapAndUnwrapSol": True  # G√®re automatiquement le wrapped SOL
        }
        
        logger.info("üèóÔ∏è Construction de la transaction de swap...")
        swap_response = requests.post(f"{JUPITER_API_BASE}/swap", json=swap_params)
        
        if swap_response.status_code != 200:
            error_msg = f"Erreur construction transaction: {swap_response.text}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "status": "error",
                "message": error_msg
            }
        
        # 3. R√©cup√©rer la transaction
        swap_data = swap_response.json()
        transaction_data = swap_data["swapTransaction"]
        
        # 4. Utiliser directement l'API RPC de Solana pour envoyer la transaction sign√©e
        rpc_url = "https://api.mainnet-beta.solana.com"
        headers = {"Content-Type": "application/json"}
        
        logger.info("üì° Pr√©paration de l'envoi de la transaction via RPC...")
        
        try:
            # Appel √† l'API SwapInstructions de Jupiter pour obtenir des instructions s√©par√©es
            logger.info("üîß Obtention des instructions s√©par√©es via Jupiter...")
            swap_instr_params = {
                "quoteResponse": quote_data,
                "userPublicKey": wallet_address,
                "wrapUnwrapSOL": True
            }
            
            instr_response = requests.post(f"{JUPITER_API_BASE}/swap-instructions", json=swap_instr_params)
            
            if instr_response.status_code != 200:
                logger.warning(f"‚ö†Ô∏è Impossible d'obtenir les instructions s√©par√©es: {instr_response.text}")
                
                # Si on ne peut pas obtenir les instructions s√©par√©es, on utilise la transaction compl√®te
                logger.info("üìù Utilisation du processus standard Jupiter v6...")
                
                # M√©thode simplifi√©e pour signer et envoyer la transaction
                # Utiliser l'API directe de Jupiter pour cr√©er une transaction sign√©e
                
                # Cr√©er une requ√™te pour obtenir une transaction sign√©e par Jupiter
                signed_tx_params = {
                    "quoteResponse": quote_data,
                    "userPublicKey": wallet_address,
                    "wrapAndUnwrapSol": True,
                    "feeAccount": wallet_address,  # Compte pour les frais
                    "computeUnitPriceMicroLamports": 1000  # Priorit√© moyenne
                }
                
                logger.info("üîè Demande de transaction √† Jupiter...")
                signed_tx_response = requests.post(f"{JUPITER_API_BASE}/swap", json=signed_tx_params)
                
                if signed_tx_response.status_code != 200:
                    raise Exception(f"Erreur lors de la demande de transaction: {signed_tx_response.text}")
                
                signed_tx_data = signed_tx_response.json()
                transaction_data = signed_tx_data["swapTransaction"]
                
                # Maintenant, nous devons signer cette transaction avec notre keypair
                # Utiliser l'API RPC directe pour envoyer la transaction
                
                # D√©coder la transaction base64
                transaction_bytes = b64decode(transaction_data)
                
                # Importer les classes n√©cessaires pour la signature
                from solders.transaction import Transaction as SoldersTransaction
                
                # D√©s√©rialiser et signer la transaction
                try:
                    # Essayer de d√©s√©rialiser comme une transaction Solders
                    tx = SoldersTransaction.from_bytes(transaction_bytes)
                    
                    # Signer la transaction avec notre keypair
                    tx.sign([keypair])
                    
                    # S√©rialiser la transaction sign√©e
                    signed_tx_bytes = bytes(tx)
                    signed_tx_data = b64encode(signed_tx_bytes).decode('utf-8')
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la signature avec Solders: {str(e)}")
                    
                    # Approche alternative: utiliser directement l'API RPC
                    # Envoyer la transaction non sign√©e et laisser le RPC g√©rer la signature
                    # Cette approche est moins s√©curis√©e mais peut fonctionner dans certains cas
                    
                    # Utiliser directement la transaction fournie par Jupiter
                    signed_tx_data = transaction_data
                
                # Cr√©er une requ√™te RPC directe avec la transaction
                sign_payload = {
                    "jsonrpc": "2.0",
                    "id": str(int(time.time())),
                    "method": "sendTransaction",
                    "params": [
                        signed_tx_data,
                        {
                            "skipPreflight": False,
                            "preflightCommitment": "confirmed",
                            "encoding": "base64",
                            "maxRetries": 3
                        }
                    ]
                }
                
                logger.info(f"üì§ Envoi de la transaction via RPC...")
                sign_response = requests.post(rpc_url, headers=headers, json=sign_payload)
                sign_result = sign_response.json()
                
                if "error" in sign_result:
                    logger.error(f"‚ùå Erreur RPC: {sign_result['error']}")
                    
                    # Approche alternative: utiliser l'API Jupiter pour cr√©er une transaction avec instructions
                    logger.info("üîÑ Tentative avec l'API Jupiter pour instructions...")
                    
                    # Obtenir les instructions de swap
                    instr_params = {
                        "quoteResponse": quote_data,
                        "userPublicKey": wallet_address,
                        "wrapUnwrapSOL": True
                    }
                    
                    instr_response = requests.post(f"{JUPITER_API_BASE}/swap-instructions", json=instr_params)
                    
                    if instr_response.status_code != 200:
                        return {
                            "status": "error",
                            "message": f"Erreur lors de l'envoi: {sign_result['error'].get('message', 'Erreur inconnue')}"
                        }
                    
                    # Utiliser l'API directe de Jupiter pour cr√©er une transaction compl√®te
                    # Cette approche est plus simple et peut fonctionner dans plus de cas
                    
                    # Cr√©er une requ√™te pour obtenir une transaction compl√®te
                    complete_tx_params = {
                        "quoteResponse": quote_data,
                        "userPublicKey": wallet_address,
                        "wrapAndUnwrapSol": True,
                        "feeAccount": wallet_address,
                        "computeUnitPriceMicroLamports": 2000  # Priorit√© plus √©lev√©e
                    }
                    
                    logger.info("üîÑ Demande de transaction compl√®te √† Jupiter...")
                    complete_tx_response = requests.post(f"{JUPITER_API_BASE}/swap", json=complete_tx_params)
                    
                    if complete_tx_response.status_code != 200:
                        return {
                            "status": "error",
                            "message": f"Erreur lors de l'envoi: {sign_result['error'].get('message', 'Erreur inconnue')}"
                        }
                    
                    complete_tx_data = complete_tx_response.json()
                    complete_tx = complete_tx_data["swapTransaction"]
                    
                    # Envoyer la transaction compl√®te
                    complete_payload = {
                        "jsonrpc": "2.0",
                        "id": str(int(time.time())),
                        "method": "sendTransaction",
                        "params": [
                            complete_tx,
                            {
                                "skipPreflight": True,  # Ignorer les v√©rifications pr√©liminaires
                                "preflightCommitment": "confirmed",
                                "encoding": "base64",
                                "maxRetries": 5
                            }
                        ]
                    }
                    
                    logger.info(f"üì§ Envoi de la transaction compl√®te via RPC...")
                    complete_response = requests.post(rpc_url, headers=headers, json=complete_payload)
                    complete_result = complete_response.json()
                    
                    if "error" in complete_result:
                        logger.error(f"‚ùå Erreur RPC finale: {complete_result['error']}")
                        return {
                            "status": "error",
                            "message": f"Erreur lors de l'envoi: {complete_result['error'].get('message', 'Erreur inconnue')}"
                        }
                    
                    tx_signature = complete_result["result"]
                    logger.info(f"üìù Transaction envoy√©e avec signature: {tx_signature}")
                    
                    # Cr√©er URL Solana Explorer
                    explorer_url = f"https://explorer.solana.com/tx/{tx_signature}?cluster=mainnet-beta"
                    
                    return {
                        "status": "pending",
                        "message": "Transaction envoy√©e, v√©rifiez l'explorateur Solana pour confirmation",
                        "txid": tx_signature,
                        "explorer_url": explorer_url,
                        "input_amount": 1.0,
                        "estimated_output": float(quote_data["outAmount"]) / 1_000_000_000,
                    }
                
                tx_signature = sign_result["result"]
                logger.info(f"üìù Transaction envoy√©e avec signature: {tx_signature}")
                
                # Cr√©er URL Solana Explorer
                explorer_url = f"https://explorer.solana.com/tx/{tx_signature}?cluster=mainnet-beta"
                
                return {
                    "status": "pending",
                    "message": "Transaction envoy√©e, v√©rifiez l'explorateur Solana pour confirmation",
                    "txid": tx_signature,
                    "explorer_url": explorer_url,
                    "input_amount": 1.0,
                    "estimated_output": float(quote_data["outAmount"]) / 1_000_000_000,
                }
            else:
                # Nous avons obtenu les instructions s√©par√©es
                logger.info("‚ö†Ô∏è Obtention des instructions OK, mais cette approche n√©cessite plus de d√©veloppement")
                logger.info("üîÑ Repli sur l'approche standard...")
                
                # Utiliser l'API directe de Jupiter pour cr√©er une transaction sign√©e
                signed_tx_params = {
                    "quoteResponse": quote_data,
                    "userPublicKey": wallet_address,
                    "wrapAndUnwrapSol": True,
                    "feeAccount": wallet_address,
                    "computeUnitPriceMicroLamports": 1000
                }
                
                logger.info("üîè Demande de transaction √† Jupiter...")
                signed_tx_response = requests.post(f"{JUPITER_API_BASE}/swap", json=signed_tx_params)
                
                if signed_tx_response.status_code != 200:
                    raise Exception(f"Erreur lors de la demande de transaction: {signed_tx_response.text}")
                
                signed_tx_data = signed_tx_response.json()
                transaction_data = signed_tx_data["swapTransaction"]
                
                # Envoyer la transaction via RPC
                sign_payload = {
                    "jsonrpc": "2.0",
                    "id": str(int(time.time())),
                    "method": "sendTransaction",
                    "params": [
                        transaction_data,
                        {
                            "skipPreflight": False,
                            "preflightCommitment": "confirmed",
                            "encoding": "base64"
                        }
                    ]
                }
                
                logger.info(f"üì§ Envoi de la transaction via RPC...")
                sign_response = requests.post(rpc_url, headers=headers, json=sign_payload)
                sign_result = sign_response.json()
                
                if "error" in sign_result:
                    logger.error(f"‚ùå Erreur RPC: {sign_result['error']}")
                    return {
                        "status": "error",
                        "message": f"Erreur lors de l'envoi: {sign_result['error'].get('message', 'Erreur inconnue')}"
                    }
                
                tx_signature = sign_result["result"]
                logger.info(f"üìù Transaction envoy√©e avec signature: {tx_signature}")
                
                # Cr√©er URL Solana Explorer
                explorer_url = f"https://explorer.solana.com/tx/{tx_signature}?cluster=mainnet-beta"
                
                return {
                    "status": "pending",
                    "message": "Transaction envoy√©e, v√©rifiez l'explorateur Solana pour confirmation",
                    "txid": tx_signature,
                    "explorer_url": explorer_url,
                    "input_amount": 1.0,
                    "estimated_output": float(quote_data["outAmount"]) / 1_000_000_000,
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'approche alternative: {str(e)}")
            return {
                "status": "error",
                "message": f"Erreur lors du traitement: {str(e)}"
            }
            
    except Exception as e:
        error_msg = f"Erreur lors de l'ex√©cution du swap: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {
            "status": "error",
            "message": error_msg
        }

if __name__ == "__main__":
    # Ce code s'ex√©cute uniquement si le fichier est appel√© directement
    result = main()
    logger.info(f"‚èπÔ∏è Script termin√© avec r√©sultat: {result}")